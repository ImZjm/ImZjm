<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/09/22/hello-world/"/>
      <url>/2025/09/22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git入门</title>
      <link href="/2025/09/22/getting-started-with-git/"/>
      <url>/2025/09/22/getting-started-with-git/</url>
      
        <content type="html"><![CDATA[<p>Git是目前全球最流行的<strong>分布式版本控制系统</strong>，用于高效管理代码（或任何文件）的修改历史，支持多人协作开发</p><ul><li><strong>分布式</strong>：每个开发者本地都有完整的代码仓库，无需依赖中央服务器即可提交、分支等操作</li><li><strong>高效性</strong>：对大项目的操作（如分支切换、提交）速度极快</li><li><strong>安全性</strong>：通过哈希算法确保代码历史不可篡改</li><li><strong>强大的分支功能</strong>：支持灵活的分支创建、合并，轻松实现并行开发</li></ul><span id="more"></span><p><strong>总之</strong>：高效的管理代码，可以查看不同时间段提交的，修改过的、没修改过的，增加了哪个文件，删除了哪个文件，改了哪个文件，改了哪一行代码，什么时候改的，谁改的，谁提交的……</p><h1 id="理解git"><a href="#理解git" class="headerlink" title="理解git"></a>理解git</h1><p>想要使用git，首先得了解git，git是如何配合各个仓库分支和开发者的。</p><p><strong>仓库</strong>：我们的代码都放在仓库里，我们可以将一个项目的根目录作为仓库目录</p><ul><li>本地仓库：仓库和代码都存在自己的电脑上</li><li>远程仓库：仓库和代码存在一台服务器上，其他开发者可以访问这个仓库<ul><li>公有仓库：一个所有人都可以访问的远程仓库</li><li>私有仓库：只有我和我的团队才能访问的远程仓库</li></ul></li></ul><p><strong>分支</strong>：仓库里面存放着代码，代码又可以有不同的分支，开发不同的功能。你姑且可以吧<code>抖音</code>和<code>tiktok</code>看成同一个项目的两个不同分支。对于老版本的git，创建主分支默认名为<code>master</code>，新版本的git一般叫<code>main</code>，就是名字不一样，没别的区别。</p><p><strong>克隆</strong>：从远程（仓库）把代码拿到本地，一般使用克隆，这会直接将远程仓库中的所有代码包括提交记录等等，全部原封不动的拿到本地你指定的文件夹中。一般不建议直接下载zip压缩包拿代码（小破站某知名博主就是这么塌房的），这仅仅只会拿代码到本地而不会携带任何作者信息，不利于二次开发。</p><p><strong>提交</strong>：当你写完代码后，你可以将代码提交到仓库中，并（必须）携带一条提交概要（summary），这时，你可以在本地仓库的提交记录中看到这条记录，你于某时某刻提交，对项目做了哪些修改，精确到具体某一行。</p><p><strong>推送</strong>：你本地仓库里面已经写好了代码，并且提交到了本地仓库，这时你可以将本地的提交推送到远程，推送完成后，远程仓库就能看到你的这条提交记录了。</p><p><strong>拉取</strong>：你将远程的代码克隆到了本地，一段时间后，其他开发者向远程推送了新的代码，你则可以将远程最新的代码拉取到本地。</p><p>更多待补充……</p><h1 id="Git的安装和简要配置"><a href="#Git的安装和简要配置" class="headerlink" title="Git的安装和简要配置"></a>Git的安装和简要配置</h1><h2 id="不同系统安装"><a href="#不同系统安装" class="headerlink" title="不同系统安装"></a>不同系统安装</h2><table><thead><tr><th align="left">平台</th><th>安装方法</th></tr></thead><tbody><tr><td align="left">Windows</td><td>1.下载官方安装包：<a href="https://git-scm.cn/downloads/win">Git For Windows</a><br />2.双击安装并无脑下一步（初学者不建议修改安装选项）</td></tr><tr><td align="left">macOS</td><td>方法1：使用Homebrew，安装命令：<code>brew install git</code><br />方法2：安装苹果官方的命令行工具（Command Line Tools）<br />安装命令：<code> xcode-select --install</code>，官方的开发工具中自带了Git等开发环境</td></tr><tr><td align="left">Linux</td><td>你都用上linux还能不会安装软件？？？<br />大便系列（Debian）：<code>sudo apt install git</code></td></tr></tbody></table><p>win的建议</p><ul><li>在安装时，一般不建议取消 “Add Git to PATH”，方便命令行调用</li><li>安装后，一般建议配置一个<code>HOME</code>环境变量指定一个自己的工作目录作为家目录，这样，在git bash中使用<code>cd ~</code>时可以像linux一样有一个家目录可以用，并在家目录中配置各种奇奇怪怪的文件</li></ul><h2 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br><span class="line"><span class="comment"># 示例输出：git version 2.39.5 (Apple Git-154)</span></span><br></pre></td></tr></table></figure><h2 id="配置用户名与邮箱"><a href="#配置用户名与邮箱" class="headerlink" title="配置用户名与邮箱"></a>配置用户名与邮箱</h2><p><strong>用户名</strong>：<br>这里的用户名可以看作是你的昵称，可以使用中文等字符。在项目版本管理中，将会显示某某提交于某年某月。一般设置成一个有标识性，能让人一眼认出你来的英文名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;你的用户名&quot;</span></span><br></pre></td></tr></table></figure><p><strong>邮箱</strong>：邮箱在git中是开发者的唯一标识。<br>场景理解：我在a电脑配置的用户名叫<code>xukun</code>，我在b电脑的叫<code>zhiyin</code>，但是我都配置了同一个邮箱，那么在统计数据时，系统都将认为是同一个开发者提交的代码。在一些远程仓库中（比如github），有点击查看提交者主页的功能，只要邮箱是同一个，就会跳转到同一个用户的主页。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;你的邮箱&quot;</span></span><br></pre></td></tr></table></figure><p><strong>配置的适用范围</strong><br>以上命令均携带<code>--global</code>，这将使配置在全局生效，配置保存在<code>~/.gitconfig</code>文件中</p><p>对于某一个项目，可以单独配置这个仓库使用另一个用户名和邮箱<br>场景理解：在自己的电脑中有一些个人项目，使用全局配置的用户名和邮箱，现在回家加班，在自己电脑上拉取了公司的代码，这时给仓库单独配置一个用户名和邮箱（一般是自己的大名和公司邮箱），这样既不影响自己的个人项目，也不影响公司项目。</p><p>都配置好后，你就可以愉快地写代码，提交代码了！</p><h1 id="特殊文件"><a href="#特殊文件" class="headerlink" title="特殊文件"></a>特殊文件</h1><h2 id="官方定义"><a href="#官方定义" class="headerlink" title="官方定义"></a>官方定义</h2><p><strong>.gitignore</strong>：当你使用集成开发环境（IDE）创建项目时，一般开发工具会给你自动生成一个<code>.gitignore</code>，这个文件里面标记不需要被git跟踪的文件或文件夹。<br>一般来说，IDE的配置文件，编译产生的文件都会标记在<code>.gitignore</code>中，让git不要记录这些文件或文件夹</p><h2 id="约定俗成"><a href="#约定俗成" class="headerlink" title="约定俗成"></a>约定俗成</h2><p><strong>.gitkeep</strong>：如果一个文件夹是空的，git不会记录这个文件夹，这时可以在文件夹中创建一个名为<code>.gitkeep</code>的空文件，用于让git跟踪空目录</p><h1 id="Git的基本操作"><a href="#Git的基本操作" class="headerlink" title="Git的基本操作"></a>Git的基本操作</h1><h2 id="初始化（git-init）"><a href="#初始化（git-init）" class="headerlink" title="初始化（git init）"></a>初始化（git init）</h2><p>你是项目作者，你新建了一个项目，这时你可以将项目初始化为一个git仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在项目根目录下</span></span><br><span class="line"><span class="built_in">cd</span> project-root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化仓库，生产隐藏文件夹 .git</span></span><br><span class="line">git init</span><br></pre></td></tr></table></figure><p>使用命令后，git会在当前目录下生成一个<code>.git</code>隐藏文件夹，仓库的所有信息都会存放在这个文件夹里，删除这个文件夹，git仓库就没了只剩下代码里。</p><h2 id="克隆（git-clone）"><a href="#克隆（git-clone）" class="headerlink" title="克隆（git clone）"></a>克隆（git clone）</h2><p>你是新来的开发者，你接手了一个项目，现在你要拿到代码并进入开发状态。不要直接在仓库下载zip压缩包，下载压缩包是没有<code>.git</code>文件夹的，也就没有仓库信息，你将无法提交和推送代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个项目目录并进入</span></span><br><span class="line"><span class="built_in">mkdir</span> project-dir &amp;&amp; <span class="built_in">cd</span> project-dir</span><br><span class="line"></span><br><span class="line"><span class="comment"># 克隆代码到当前文件夹，这时project-dir就是项目的根目录</span></span><br><span class="line">git <span class="built_in">clone</span> https://xxx.com/user/repo.git</span><br></pre></td></tr></table></figure><p>使用命令后，project-dir目录中的内容就会与远程仓主分支中的内容同步，或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建文件夹并克隆</span></span><br><span class="line">git <span class="built_in">clone</span> https://xxx.com/user/repo.git project-dir</span><br></pre></td></tr></table></figure><p>这会创建一个<code>project-dir</code>文件夹，并将远程的代码放进去，二者任选其一即可，没有区别。</p><h2 id="暂存（git-add）"><a href="#暂存（git-add）" class="headerlink" title="暂存（git add）"></a>暂存（git add）</h2><p>提交代码前，你需要将代码加入暂存区，提交时，只有暂存区的代码会被提交到仓库。在一些图形化的git工具里面，可能都不会提到<code>暂存</code>这个词，变成了用复选框打勾，勾上要提交的修改点击提交就行。VSCode中有<code>暂停</code>的概念，点击加号添加到暂存区再点击提交，其实就跟其他图形工具的打勾一样，看着不同罢了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 暂存单个文件</span></span><br><span class="line">git add 文件  <span class="comment"># 如 git add index.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂存所有修改的文件</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂存指定类型文件（如所有 .js 文件）</span></span><br><span class="line">git add *.js</span><br></pre></td></tr></table></figure><p>使用命令后，指定的文件就会添加到暂存区等待提交</p><h2 id="提交（git-commit）"><a href="#提交（git-commit）" class="headerlink" title="提交（git commit）"></a>提交（git commit）</h2><p>代码写完后，或实现某个功能后，可以进行一次代码提交，这将记录本次修改了什么，谁修改的……<br>后面可以在提交记录中找到这条提交，查看提交内容，也可以一键回退到这个提交记录的版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;提交说明&quot;</span></span><br></pre></td></tr></table></figure><p>使用命令后，暂存区的修改会被提交到本地仓库，并附上提交说明，请务必携带提交说明，否则提交失败。<br>没有被add的文件则不会被提交。</p><p><strong>重新提交（修订）</strong>：刚才提交错了，并且提交还没有推动到远程，这时还有后悔药</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><h2 id="远程（git-remote）"><a href="#远程（git-remote）" class="headerlink" title="远程（git remote）"></a>远程（git remote）</h2><p>将一个本地仓库与多个远程仓库进行关联。这样，推送代码的时候，git就知道代码要推送到哪。</p><p>对于一个新的git仓库，肯定是没有定义远程的。如果代码是克隆过来的，那么远程已经定义好了，就是被克隆的这个仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前已定义的远程仓库</span></span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义远程仓库</span></span><br><span class="line">git remote add origin https://github.com/your-username/your-repo.git</span><br></pre></td></tr></table></figure><p>这里<code>origin</code>是你在本地给远程仓库取的名字，用这个名字代替那一长坨链接。一般我们都会取名为<code>origin</code>，只有一个远程仓库时，不推荐取别的名字。</p><h2 id="推送（git-push）"><a href="#推送（git-push）" class="headerlink" title="推送（git push）"></a>推送（git push）</h2><p>你写完代码，并将修改提交到了本地的某个分支，这时，你可以将这些修改同步到远程，既推送。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将本地的master分支推送到远程的master分支</span></span><br><span class="line">git push origin master:master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果本地分支与远程分支的名字相同，可以省略冒号</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>这时系统会验证你的权限，是否有同送代码的权限，权限校验成功后，远程的提交记录就会与本地同步，其他开发者（有权限）就能看到这些代码是你写的，你什么时候提交的等等。</p><p>后续如果还是提交这个分支，命令还可以再省略</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 省略再省略的命令</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p><strong>强制推送</strong>：本地的提交与远程的提交发生冲突时，可以使用强制推送（不推荐）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 强制推送，在后面加 --force</span></span><br><span class="line">git push origin master --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或省略成 -f</span></span><br><span class="line">git push -f</span><br></pre></td></tr></table></figure><p>强制推送需要谨慎使用，如果是保护分支，在强制推送时会提示没有权限。</p><p>强制推送后，本地的记录会强制覆盖远程，如果其他开发者提交了别的代码，也会被覆盖。</p><h1 id="图形化工具"><a href="#图形化工具" class="headerlink" title="图形化工具"></a>图形化工具</h1><p>让开发者更专注于写代码，而不是调教git</p><h2 id="Github-Desktop"><a href="#Github-Desktop" class="headerlink" title="Github Desktop"></a>Github Desktop</h2><p>链接：<a href="https://github.com/apps/desktop">https://github.com/apps/desktop</a><br>github官方开源的图形化git工具，界面简洁实用<br><img src="https://cdn.jsdelivr.net/gh/ImZjm/ResourceHub/images%2F2025%2F09%2F22%2F20250922222859992_1758551340.png" alt="Github Desktop截图"></p><h2 id="UGit"><a href="#UGit" class="headerlink" title="UGit"></a>UGit</h2><p>链接：<a href="https://ugit.qq.com/zh/">https://ugit.qq.com/zh/</a><br>腾讯家的git图形化工具，功能相对更多<br><img src="https://cdn.jsdelivr.net/gh/ImZjm/ResourceHub/images%2F2025%2F09%2F22%2Fimage-20250922224242702_1758552162.png" alt="UGit截图"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++满分密集</title>
      <link href="/2025/01/05/cpp/"/>
      <url>/2025/01/05/cpp/</url>
      
        <content type="html"><![CDATA[<h1 id="语法基础"><a href="#语法基础" class="headerlink" title="语法基础"></a>语法基础</h1><p>引入头文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>     <span class="comment">//无分号“；”</span></span></span><br></pre></td></tr></table></figure><p>使用命名空间</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;    <span class="comment">//有分号“；”</span></span><br></pre></td></tr></table></figure><ul><li>打印Hello World<ul><li>使用命名空间：<code>cout&lt;&lt;&quot;Hello World&quot;;</code></li><li>未使用命名空间：<code>std::cout&lt;&lt;&quot;Hello World&quot;;</code></li></ul></li></ul><p>从键盘输入</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义要输入的变量,使用cin</span></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line">cin&gt;&gt;a;</span><br></pre></td></tr></table></figure><p>数组<br>像C一样定义数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure><p>使用new关键字</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *i = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><p><strong>函数</strong><br>主函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回值必须是int, 函数名别写成“面”</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>函数重载<br>即使函数名相同，但参数等不同，就不是同一个函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数1</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">test</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//函数2</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//函数3</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(<span class="type">int</span> i)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>传参时，若将数组作为参数，形参写成指针<br>一般还会增加一个形参n，表示数组的长度，方便函数处理</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(<span class="type">int</span> *p, <span class="type">int</span> n)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> i[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="built_in">test</span>(i, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p><code>class</code><br>英 <code>/ klɑːs /</code><br>n. （货物、服务或人的）等级，类别；<br>v. 把……归类，把……看作；属于……类（或等级），被列为某类（或某级）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;&#125;;<span class="comment">//注意有分号“；”，函数可写在分号后面</span></span><br></pre></td></tr></table></figure><p>成员可见性</p><ul><li>public:   可在类外面直接访问</li><li>private:   只能在类里面访问</li><li>protected:   private+可在子类中访问</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line"><span class="comment">//如果不写，则默认private</span></span><br><span class="line"><span class="type">int</span> c;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>定义成员函数</p><ol><li>类内部<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;Hello World&quot;</span>&lt;&lt;endl;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>类外部<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>;    <span class="comment">//分号结尾</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Person::test</span><span class="params">()</span></span>&#123;</span><br><span class="line"> cout&lt;&lt;<span class="string">&quot;Hello World&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>成员变量和函数的调用<br>……</p><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><p><code>object</code><br>英 <code>/ ˈɒbdʒɪkt; əbˈdʒekt /</code><br>n. （引发某种情感或行为的）对象；物体，实物；目的，目标</p><h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><p>构造(创建)对象时，自动调用的函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="type">int</span> age,height;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//构造函数要写在public里面，不然外部访问不到，没法创建对象</span></span><br><span class="line">    <span class="comment">//构造函数必须与类名相同，不要写返回值，void也别写</span></span><br><span class="line">    <span class="built_in">Person</span>()&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Hello World&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//这句话会创建一个名为p的对象，程序会自动调用构造函数</span></span><br><span class="line">    <span class="comment">//控制台打印 Hello World</span></span><br><span class="line">    Person p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>带参数的构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> newAge, <span class="type">int</span> newHeight)&#123;</span><br><span class="line">    age=newAge;</span><br><span class="line">    height=newHeight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等价</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//冒号分割，参数用逗号隔开，最后的花括号不要丢</span></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> na, <span class="type">int</span> nh):<span class="built_in">age</span>(na),<span class="built_in">height</span>(nh)&#123;&#125;</span><br></pre></td></tr></table></figure><p>通过带参数的构造函数创建对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p</span><span class="params">(<span class="number">18</span>,<span class="number">178</span>)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="复制构造函数"><a href="#复制构造函数" class="headerlink" title="复制构造函数"></a>复制构造函数</h1><p>与构造函数类似</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="type">int</span> age,height;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> na, <span class="type">int</span> nh):<span class="built_in">age</span>(na),<span class="built_in">height</span>(nh)&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//复制构造函数</span></span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">const</span> Person &amp;other)&#123;</span><br><span class="line">        age=other.age;</span><br><span class="line">        height=other.height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>,<span class="number">178</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过复制构造函数来构造一个新的对象p2;</span></span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h1><p>对象销毁时，程序自动调用的函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="type">int</span> age,height;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//析构函数</span></span><br><span class="line">    ~<span class="built_in">Person</span>()&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Bye&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h1><h2 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h2><p>使用<code>static</code>关键字，将变量或函数标记为静态，静态成员属于<code>类</code>，所有<code>对象</code>共享</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> age=<span class="number">18</span>;</span><br><span class="line"><span class="type">int</span> height=<span class="number">178</span>;</span><br><span class="line"><span class="comment">//静态变量赋初值必须在类外，否则报错</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> Person::count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//因为静态变量不属于对象，而是属于类</span></span><br><span class="line">    <span class="comment">//因此可以直接通过Person::count访问</span></span><br><span class="line">    cout&lt;&lt;Person::count&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//也可以通过 对象.count 访问</span></span><br><span class="line">    Person::count++;</span><br><span class="line">    Person p;</span><br><span class="line">    cout&lt;&lt;p.count&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;不管如何访问count这个变量，count自始至终都是同一个&#x3D;&#x3D;</p><h2 id="静态函数"><a href="#静态函数" class="headerlink" title="静态函数"></a>静态函数</h2><p>同样使用<code>static</code>关键字</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;How are you?&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person::<span class="built_in">say</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="友元函数，友元类"><a href="#友元函数，友元类" class="headerlink" title="友元函数，友元类"></a>友元函数，友元类</h2><ul><li><p>友元函数<br>友元函数不属于类，直接通过函数名调用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> privateData;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">friendFunction</span><span class="params">(MyClass &amp;obj)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">friendFunction</span><span class="params">(MyClass &amp;obj)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 可以访问 obj 的私有成员</span></span><br><span class="line">    obj.privateData = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>友元类</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line"><span class="comment">//定义Teacher类为Student的友元类</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Teacher</span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> score;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Student</span>(<span class="type">int</span> s):<span class="built_in">score</span>(s)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">setVal</span><span class="params">(Student &amp;stu, <span class="type">int</span> sco)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setVal</span><span class="params">(Student &amp;stu, <span class="type">int</span> sco)</span></span>&#123;</span><br><span class="line">    stu.score = sco;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">showScore</span><span class="params">(<span class="type">const</span> Student &amp;s)</span></span>&#123;</span><br><span class="line"><span class="comment">//此时，可以直接通过对象.属性访问private属性</span></span><br><span class="line">        cout&lt;&lt;s.score&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Student <span class="title">s</span><span class="params">(<span class="number">90</span>)</span></span>;</span><br><span class="line">    <span class="built_in">setVal</span>(s,<span class="number">99</span>);</span><br><span class="line">    Teacher::<span class="built_in">showScore</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>c++中，一个类可以继承自多个类</p><h2 id="单继承"><a href="#单继承" class="headerlink" title="单继承"></a>单继承</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>()&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Person构造函数&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Person</span>()&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Person析构函数&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//冒号 public 被继承的类</span></span><br><span class="line"><span class="comment">//公有继承自Person</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Girl</span>:<span class="keyword">public</span> Person&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Girl</span>()&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Girl构造函数&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Girl</span>()&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Girl析构函数&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Girl g;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当通过<code>Girl g</code>创建Girl对象时，首先会调用Girl的父类的构造函数，再调用Girl的构造函数<br>程序结束后，系统会自动调用析构函数销毁对象，子类会率先被销毁，最后销毁父类，因此，先调用Girl的析构函数，再调用Person的析构函数</p><p>当父类构造函数有参数时</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> age):<span class="built_in">age</span>(age)&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Person构造函数&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Person</span>()&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Person析构函数&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//冒号 public 被继承的类</span></span><br><span class="line"><span class="comment">//公有继承自Person</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Girl</span>:<span class="keyword">public</span> Person&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Girl</span>(<span class="type">int</span> age):<span class="built_in">Person</span>(age)&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Girl构造函数&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Girl</span>()&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Girl析构函数&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">Girl <span class="title">g</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类的构造函数需要在初始化列表中调用父类的构造函数，并给一个参数，这样父类的构造函数才能正常执行</p><h2 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Hello&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Girl</span>:<span class="keyword">public</span> Person&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">string name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Friend</span>:<span class="keyword">public</span> Person&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">string hobby;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Girlfriend</span>:<span class="keyword">public</span> Girl,<span class="keyword">public</span> Friend&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;I love you!&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Girlfriend gf;</span><br><span class="line">    gf.Girl::age=<span class="number">10</span>;</span><br><span class="line">    cout&lt;&lt;gf.Girl::age&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;gf.Friend::age&lt;&lt;endl;</span><br><span class="line">    gf.<span class="built_in">say</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Person中的age和say()分别被继承了，Girlfriend有两个父类，此时Girlfriend类中有两个age和say()，直接通过<code>gf.age</code>访问会报错，有两个age，鬼晓得你要访问哪个age，则通过<code>gf.Girl::age</code>和<code>gf.Friend::age</code>访问某一个age，注意：这两个age是两个不同的变量，值不同。<br>gf中的say()由于与Person中的say()相同，则直接覆盖了，使用gf.say()可以直接调用gf中的say()，并打印I love you!</p><p>为了解决二义性，可以只用virtual关键字，以虚基类的形式继承Person<br><code>class Girl:virtual public Person</code><br><code>class Friend:virtual public Person</code><br>此时<code>gf.Girl::age</code>，<code>gf.Friend::age</code>以及<code>gf.age</code>是同一个变量</p><h1 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h1><p>运算符重载，给运算符定义为我的功能，做到1+1&#x3D;3</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> a):<span class="built_in">age</span>(a)&#123;&#125;</span><br><span class="line">Person <span class="keyword">operator</span>+(Person &amp;p)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Person</span>(age+p.age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout&lt;&lt;age&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line">    Person p3 = p1 + p2;</span><br><span class="line">    p<span class="number">3.</span><span class="built_in">show</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自增<code>++</code>运算符</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> a):<span class="built_in">age</span>(a)&#123;&#125;</span><br><span class="line">    Person <span class="keyword">operator</span>++(<span class="type">int</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;后置++&quot;</span>&lt;&lt;endl;</span><br><span class="line">        Person tmp = *<span class="keyword">this</span>;</span><br><span class="line">        age++;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Person &amp; <span class="keyword">operator</span>++()&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;前置++&quot;</span>&lt;&lt;endl;</span><br><span class="line">        age++;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout&lt;&lt;age&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line">    p1++;</span><br><span class="line">    ++p2;</span><br><span class="line">    p<span class="number">1.</span><span class="built_in">show</span>();</span><br><span class="line">    p<span class="number">2.</span><span class="built_in">show</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意区分：</p><ul><li>后置：<code>Person operator++(int)</code><br>后置在后面括号里写个int</li><li>前置：<code>Person &amp; operator++()</code><br>前置在前面加个&amp;</li></ul><h1 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h1><p>这玩意比较绕<br>多态：相同的代码，不同的功能<br>虚函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Hello&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Girl</span>: <span class="keyword">public</span> Person&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">say</span><span class="params">()</span> <span class="keyword">override</span></span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;hi&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Friend</span>: <span class="keyword">public</span> Person&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">say</span><span class="params">()</span> <span class="keyword">override</span></span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;How are you?&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person *g = <span class="keyword">new</span> Girl;</span><br><span class="line">    Person *f = <span class="keyword">new</span> Friend;</span><br><span class="line">    g-&gt;<span class="built_in">say</span>();</span><br><span class="line">    f-&gt;<span class="built_in">say</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>纯虚函数：<br>没有函数体，必须在子类中重写，否则报错<br><code>virtual void virFunction()=0;</code><br>一般用在无需事例化的抽象类中</p><h1 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h1><p>对于不确定的参数类型，不用写一堆函数<br>对于函数，在函数上方加上<code>template &lt;typename T&gt;</code>，接下来的函数中，使用T代指任意一种类型，可以是int，float等<br>要代指多种类型，则<code>template &lt;typename T1, typename T2&gt;</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">max</span><span class="params">(T a, T b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a &gt; b) ? a : b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类模版，则在类定义前加上<code>template &lt;typename T&gt;</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T data;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(T d):<span class="built_in">data</span>(d)&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//若在类外定义函数体，需要加上类模版</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> Person&lt;T&gt;::<span class="built_in">show</span>()&#123;</span><br><span class="line">cout&lt;&lt;data&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//实例化一个模版类</span></span><br><span class="line"><span class="comment">//类后面紧跟尖括号，这里用int表示所有的T</span></span><br><span class="line"><span class="function">Person&lt;<span class="type">int</span>&gt; <span class="title">p</span><span class="params">(<span class="number">123</span>)</span></span>;</span><br><span class="line">p.<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//写什么，模版中的T就代表什么</span></span><br><span class="line"><span class="function">Person&lt;<span class="type">float</span>&gt; <span class="title">p2</span><span class="params">(<span class="number">3.14</span>)</span></span>;</span><br><span class="line">    p<span class="number">2.</span><span class="built_in">show</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
